package load_static_files;

import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;

public class HttpRequest {
	private Socket socket;
	private String method;
	private String uri;
	private String protocol;
	private Map<String, String> headers = new HashMap<String, String>();
	
	private String parsedUri;
	private String paraLine;
	private Map<String, String> parameters = new HashMap<String, String>();

	public HttpRequest(Socket socket) {
		super();
		this.socket = socket;
	}
	
	private void parseLine() {
		try {
			String line = readLine();
			String[] data = line.split("\\s");
			method = data[0];
			uri = data[1];
			protocol = data[2];
			parseUri(uri);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private void parseHeaders() {
		try {
			String line = readLine();
			String[] data = line.split(":");
			headers.put(data[0], data[1]);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	/**
	 * 如果method是post则会有正文
	 * 找寻正文长度
	 * 如果长度不为零
	 * 找寻decode
	 */
	private void parseContent() {
		if(method.equalsIgnoreCase("post")) {
			String len = headers.get("Content-Length");
			int length = Integer.parseInt(len);
			if(length > 1) {
				
			}
		}
	}
	
	private void parseUri(String line) {
		//找有没有参数呀
		if(line.contains("?")) {
			String[] data = line.split("\\?");
			parsedUri = data[0];
			if(data.length > 1) {
				paraLine = data[1];
				parseParameters(paraLine);
			}
		}else {
			parsedUri = uri;
		}
		
	}
	
	private void parseParameters(String line) {
		String[] data = line.split("&");
		for(String str:data) {
			String[] paraList = str.split("=");
			parameters.put(paraList[1], paraList[2]);
		}
	}
	
	
	private String readLine() throws IOException {
		StringBuilder builder = new StringBuilder();
		InputStream in = socket.getInputStream();
		char cur = ' ';
		char pre = ' ';
		int d;
		while((d=in.read())!=-1) {
			cur = (char)d;
			if(pre==10 && cur==13) break;
			builder.append(cur);
			pre = cur;
		}
		return builder.toString().trim();
	}
}
