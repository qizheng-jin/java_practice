import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.Socket;
import java.net.URLDecoder;
import java.util.HashMap;
import java.util.Map;

public class HttpRequest {
	private Socket socket;
	private String method;
	private String uri;
	private String protocol;
	private Map<String, String> headers = new HashMap<String, String>();
	private String parsedUri;
	private Map<String, String> parameter = new HashMap<String, String>();
	
	public HttpRequest(Socket socket) {
		this.socket = socket;
		parseLine();
		parseHeaders();
		parseContent();
	}
	
	private void parseLine() {
		try {
			System.out.println("开始解析请求行");
			String line = readLine();
			if(line.isEmpty()) System.out.println("请求行为空");
			String[] data = line.split("\\s");
			method = data[0];
			uri = data[1];
			protocol = data[2];
			
			System.out.println("method is " + method +
								", uri is " + uri +
								", protocol is " + protocol);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private void parseHeaders() {
		try {
			while(true) {
				String line = readLine();
				if(line.isEmpty()) break;
				String[] data = line.split(":");
				
				headers.put(data[0], data[1]);
				
			}
			System.out.println("headers is " + headers);
			System.out.println("状态头发送完毕!");
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private void parseURI() {
		if(uri.isEmpty()) return;
		//看看uri中有没有含参数 "?"(GET函数)
		if(uri.contains("\\?")) {
			System.out.println("请求页面含有参数");
			String[] data = uri.split("\\?");
			if(data.length == 2) {
				parsedUri = data[0];
				parseParameter(data[1]);
				System.out.println("parsedURI is " + parsedUri +
									"parameter is " + parameter);
			
				return;
			}
		}
		
		
		
		parsedUri = uri;
		System.out.println("parsedURI is " + parsedUri);
	}
	
	private void parseParameter(String line) {
		String[] data = line.split("&");
		for(String str: data) {
			String[] para = str.split("=");
			parameter.put(para[0], para[1]);
		}
	}
	
	/**
	 * 如果有POST方法, 将会有消息正文,这个方法可以分析post
	 */
	private void parseContent() {
		System.out.println("开始解析消息正文");
		//如果消息头中method为POST的话，开始解析消息头
		if(method.equalsIgnoreCase("post")) {
			System.out.println("含有post方法开始解析正文");
			//获取消息正文的长度
			String len = headers.get("Content-Length");
			if(len!=null) {
				int length = Integer.parseInt(len); //将长度转化为int值
				byte[] data = new byte[length];
				try {
					InputStream in = socket.getInputStream();
					in.read(data);//将消息正文对应的文字全部读取到data数组之中
				}catch(IOException e) {
					e.printStackTrace();
				}
				//根据消息头Content_Type了解浏览器发送过来的正文是什么并进行对应的处理
				String type = headers.get("Content-Type");
				if(type!=null) {
					//判断是否为form表单
					if("application/x-www-form-urlencoded".equalsIgnoreCase(type)) {
						try {
							String line = new String(data, "ISO8859-1");
							line = URLDecoder.decode(line, "UTF-8");
							System.out.println("消息正文 :" + line );
							parseParameter(line);
						}catch(UnsupportedEncodingException e) {
							e.printStackTrace();
						}
					}
				}
			}
			
			
		}
		System.out.println("消息处理完毕");
	}
	
	
	private String readLine() throws IOException{
		StringBuilder builder = new StringBuilder();
		char cur = ' ';
		char pre = ' ';
		int d;
		InputStream in = socket.getInputStream();
		while((d=in.read())!=-1) {
			cur = (char)d;
			if(pre == 13 && cur == 10) break;
			builder.append(cur);
			pre = cur;
		}
		return builder.toString().trim();
	}
	
	
}
