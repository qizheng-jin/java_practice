import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.nio.file.attribute.AclEntry.Builder;
import java.util.HashMap;
import java.util.Map;

public class test {
	private Socket socket;
	private String method;
	private String uri;
	private String protocol;
	private Map<String, String> headers = new HashMap<String, String>();
	
	private String parsedUri;
	private Map<String, String> parameter = new HashMap<String, String>();
	
	public test(Socket socket) {
		super();
		this.socket = socket;
	}
	
	private void parseLine() {
		try {
			String line = readLine();
			String[] data = line.split("\\s");
			method = data[0];
			uri = data[1];
			protocol = data[2];
			System.out.println("method is " + method + 
								"uri is "  + uri +
								"protocol is " + protocol);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private void parseHeaders() {
		while(true) {
			try {
				String line = readLine();
				if (line.isEmpty()) break;
				String[] data = line.split(":");
				headers.put(data[0], data[1]);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
	}
	
	/**
	 * 1. 进一步分析uri
	 * 2. 如果网页链接中含参数(GET函数)
	 * 	2.1	将链接从?拆分,前面是域名,后面是参数
	 * 	2.2	将参数部分通过"&"拆分,每一个单独的都是一个参数
	 * 	2.3	将参数部分通过"="拆分,等号左边为变量名，右边为属性
	 * 		存入一个hashmap之中.
	 * 3. 如果不含参数,则parsedUri = uri
	 */
	private void parseUri() {
		if(uri.contains("?")) {
			String[] data = uri.split("\\?");
			parsedUri = data[0];
			if(data.length > 1) {
				String paraLine = data[1];
				data = paraLine.split("&");
				for(String str:data) {
					String[] para = str.split("=");
					parameter.put(para[0], para[1]);
				}
				System.out.println("parsedUri is " + parsedUri);
				System.out.println("parameter is " + parameter);
			}
		}else {
			parsedUri = uri;
		}
	}
	
	/*
	 * POST方法就会有响应正文
	 * 1.	如果消息头中的方法(method)为post
	 * 	1.1		解析消息头中的消息正文长度(Content-Length)是否为空
	 * 		1.1.1	如果正文长度不为零,用in.read(len)读取
	 * 		
	 * 		
	 */
	private void parseContent() {
		System.out.println("开始解析消息正文");
		
	}
	
	private String readLine() throws IOException {
		StringBuilder builder = new StringBuilder();

		InputStream in = socket.getInputStream();
		char cur = ' ';
		char pre = ' ';
		int d = -1;
		
		while((d=in.read()) != -1) {
			cur = (char) d;
			if (pre == 13 && cur == 10) break;
			builder.append(cur);
			pre = cur;
		}
		return builder.toString().trim();
	}
}
